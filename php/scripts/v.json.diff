#!/usr/bin/env php
<?php
$a = getopt('svhn');
$j1 = null;
$s = isset($a['s']) ? true : false;
$n = isset($a['n']) ? true : false;
$v = isset($a['v']) ? true : false;
if (isset($a['h'])) {
    echo 'USEAGE: ' . __FILE__ . ' [-s] [-v] [-h]' . PHP_EOL;
    echo "\tcheck diff of first input json".PHP_EOL;
    echo "\t(input :q to quit)".PHP_EOL;
    echo "\t-n filter same".PHP_EOL;
    echo "\t-s strict checking".PHP_EOL;
    echo "\t-v verbose infomation".PHP_EOL;
    echo "\t-h helper".PHP_EOL;
    exit;
}
while ($j = fgets(STDIN)) {
    $j = trim($j);
    if ($j == ':q') {
        break;
    }
    $j = json_decode($j, $s ? false : true);
    if (empty($j)) {
        echo 'please input json[ or :q to quit]:'.PHP_EOL;;
        continue;
    }
    if ($j1 === null) {
        $j1 = $j;
        continue;
    } else {
        $j2 = $j;
    }
    if (!empty($j1) && !empty($j2)) {
        $d = diff($j1, $j2, '', [$s, $v, $n]);
        echo "SAME:[${d[0]}]\tDIFF:[${d[1]}]\tNOT EXISTS:[${d[2]}]\tSURPLUS:[${d[3]}]\tTYPE DIFF:[${d[4]}]".PHP_EOL;
    } else {
        echo 'not json format'.PHP_EOL;
    }
}

function equal($s1, $s2)
{
    if ($s1 === $s2) {
        return 1;
    } elseif ($s1 == $s2) {
        return 2;
    }
    return 0;
}

function diff($a1, $a2, $p, $o)
{
    $s = $o[0];
    $v = $o[1];
    $n = $o[2];
    $sc = $dc = $nec = $spc = $tdc = 0;
    if ($v
        && ((is_array($a1) && is_object($a2))
            ||is_object($a1) && is_array($a2))
    ) {
        echo "[TYPE DIFF]\t".$p . PHP_EOL;
        $tdc++;
        if ($v) {
            echo "\tBASE:\t" . json_encode($a1) . PHP_EOL;
            echo "\tTARGET:\t" . json_encode($a2) . PHP_EOL;
        }
    } else {
        foreach ($a1 as $_k => $_v) {
            $prekey = $p . "\t" .$_k;
            if ((is_array($a2) && isset($a2[$_k]))
                || (is_object($a2) &&isset($a2->$_k))
            ) {
                $_a2v = is_array($a2) ? $a2[$_k] : $a2->$_k;
                if(is_scalar($_v)) {
                    $equal = equal($_a2v, $_v);
                    if ($equal) {
                        if ($s && $equal === 2) {
                            echo "[TYPE DIFF]\t".$prekey . PHP_EOL;
                            $tdc++;
                            if ($v) {
                                echo "\tBASE:\t" . json_encode($_v) . PHP_EOL;
                                echo "\tTARGET:\t" . json_encode($_a2v) . PHP_EOL;
                            }
                        } else {
                            if (!$n) {
                                echo "[SAME]\t" . $prekey . PHP_EOL;
                            }
                            $sc++;
                        }
                    } else {
                        echo "[DIFF]\t" .$prekey . PHP_EOL;
                        $dc++;
                        if ($v) {
                            echo "\tBASE:\t" . json_encode($_v) . PHP_EOL;
                            echo "\tTARGET:\t" . json_encode($_a2v) . PHP_EOL;
                        }
                    }
                } else {
                    $diff = diff($_v, $_a2v, $prekey, $o);
                    $sc += $diff[0];
                    $dc += $diff[1];
                    $nec += $diff[2];
                    $spc += $diff[3];
                    $tdc += $diff[4];
                }
                if (is_array($a2)) {
                    unset($a2[$_k]);
                } else {
                    unset($a2->$_k);
                }
            } else {
                echo "[NOT EXIST]\t" . $prekey . PHP_EOL;
                $nec++;
                if ($v) {
                    echo "\tBASE:\t" . json_encode($_v) . PHP_EOL;
                }
            }
        }
        if (!empty($a2)) {
            foreach ($a2 as $_k => $_v) {
                echo "[SURPLUS]\t" . $p . "\t" . $_k. PHP_EOL;
                $spc++;
                if ($v) {
                    echo "\tTARGET:\t" . json_encode($_v) . PHP_EOL;
                }
            }
        }
    }
    return [$sc, $dc, $nec, $spc, $tdc];
}
